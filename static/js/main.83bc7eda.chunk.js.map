{"version":3,"sources":["Infobox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","total","active","isRed","props","console","log","Card","onClick","className","CardContent","Typography","color","gutterBottom","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","Map","countries","zoom","TileLayer","url","attribution","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","interestect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFornat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","getCountriesData","onCountryChange","e","countryCode","target","FormControl","Select","variant","onChange","MenuItem","Infobox","event","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.83bc7eda.chunk.js","sourcesContent":["import React from 'react'\nimport {Card, CardContent, Typography } from \"@material-ui/core\";\nimport \"./InfoBox.css\";\n\nfunction InfoBox({title, cases, total, active, isRed, ...props}) {\n    console.log(title, active);\n    return (\n        <Card \n        onClick={props.onClick}\n        className={`infoBox ${active && \"infoBox--selected\"} ${\n            isRed && \"infoBox--red\"\n          }`}\n        >\n        <CardContent>\n        {/* Title i.e. Coronavirus Cases */}\n        <Typography className=\"infoBox__title\" color=\"textSecondary\" gutterBottom>\n            {title}\n        </Typography>\n        \n        {/* +120k Number of cases */}\n        <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>\n          {cases}\n        </h2>\n\n        {/* 1.2 Million Total */}\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\n            {total} Total\n        </Typography>\n\n      </CardContent>\n     </Card>\n    );\n}\n\nexport default InfoBox\n","import React from \"react\";\nimport numeral from \"numeral\";\nimport { Circle, Popup } from \"react-leaflet\";\n\nconst casesTypeColors = {\n  cases: {\n    hex: \"#CC1034\",\n    //rgb: \"rgb(204, 16, 52)\",\n    //half_op: \"rgba(204, 16, 52, 0.5)\",\n    multiplier: 800,\n  },\n  recovered: {\n    hex: \"#7dd71d\",\n    //rgb: \"rgb(125, 215, 29)\",\n    //half_op: \"rgba(125, 215, 29, 0.5)\",\n    multiplier: 1200,\n  },\n  deaths: {\n    hex: \"#fb4443\",\n    //rgb: \"rgb(251, 68, 67)\",\n    //half_op: \"rgba(251, 68, 67, 0.5)\",\n    multiplier: 2000,\n  },\n};\n\nexport const sortData = (data) => {\n  let sortedData = [...data];\n  sortedData.sort((a, b) => {\n    if (a.cases > b.cases) {\n      return -1;\n    } else {\n      return 1;\n    }\n  });\n  return sortedData;\n};\n\nexport const prettyPrintStat = (stat) =>\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\n\n  // Draw circles on the map with interactive tooltip\nexport const showDataOnMap = (data, casesType = \"cases\") =>\n  data.map((country) => (\n    <Circle\n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      color={casesTypeColors[casesType].hex}\n      fillColor={casesTypeColors[casesType].hex}\n      fillOpacity={0.4}\n      radius={\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n      }\n    >\n      <Popup>\n        <div className=\"info-container\">\n          <div\n            className=\"info-flag\"\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\n          ></div>\n          <div className=\"info-name\">{country.country}</div>\n          <div className=\"info-confirmed\">\n            Cases: {numeral(country.cases).format(\"0,0\")}\n          </div>\n          <div className=\"info-recovered\">\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\n          </div>\n          <div className=\"info-deaths\">\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\n          </div>\n        </div>\n      </Popup>\n    </Circle>\n  ));","import React from \"react\";\nimport { MapContainer as LeafletMap, TileLayer } from \"react-leaflet\";\nimport \"./Map.css\";\nimport { showDataOnMap } from \"./util\";\n\nfunction Map({ countries, casesType, center, zoom }) {\n  return (\n    <div className=\"map\">\n      <LeafletMap center={center} zoom={zoom}>\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        />\n        {showDataOnMap(countries, casesType)}\n      </LeafletMap>\n    </div>\n  );\n}\n\nexport default Map;","import React from 'react'\nimport './Table.css';\nimport numeral from \"numeral\"; \n\nfunction Table({ countries }) {\n    return ( \n      <div className=\"table\">\n        {countries.map((country) => (\n        <tr>\n          <td>{country.country}</td>\n          <td>\n            <strong>{numeral(country.cases).format(\"0,0\")}</strong>\n          </td>\n        </tr>\n      ))}\n    </div>\n  );\n}\n\nexport default Table; \n","import React, { useState, useEffect } from 'react';\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\"; \n\nconst options = {\n    legend: {\n        display: false, \n    }, \n    elements: {\n        point: {\n            radius: 0,\n        },\n    },\n\n    maintainAspectRatio: false,\n    tooltips: {\n        mode: \"index\",\n        interestect: false, \n        callbacks: {\n            label: function (tooltipItem, data) {\n                return numeral(tooltipItem.value).format(\"+0,0\");\n            },\n        },\n    },\n\n    scales: {\n        xAxes: [\n            {\n                type: \"time\", \n                time: {\n                    format: \"MM/DD/YY\",\n                    tooltipFornat: \"ll\",\n                },\n            },\n        ],\n        yAxes: [\n            {\n                gridLines: {\n                    display: false,\n                },\n                ticks: {\n                    callback: function (value, index, values) {\n                        return numeral(value).format(\"0a\");\n                    }\n                }\n            }\n        ]\n\n    }\n}\n\nconst buildChartData = (data, casesType) => {\n    const chartData = [];\n    let lastDataPoint; \n    for(let date in data.cases) {\n        if(lastDataPoint) {\n            let newDataPoint = {\n                x: date,\n                y: data[casesType][date] - lastDataPoint\n            };\n            chartData.push(newDataPoint);\n        }\n        lastDataPoint = data[casesType][date];\n    }\n    return chartData;\n};\n\nfunction LineGraph({casesType = 'cases'} ) {\n    const [data, setData] = useState({});\n// https://disease.sh/v3/covid-19/historical/all?lastdays=120\n    \n    useEffect(() => {\n        const fetchData = async () => { \n        await fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=120')\n        .then((response) => {\n            return response.json();\n        })\n        .then((data) => {\n            let chartData = buildChartData(data, \"cases\");\n            setData(chartData);\n        });\n    };\n        fetchData();\n    }, [casesType]);\n\n    return (\n        <div>\n        {data?.length > 0 && (\n            <Line \n            options={options}\n            data={{\n                datasets: [{\n                   backgroundColor: \"rgba(204,16,52,0.5)\",\n                   borderColor: \"#CC1034\",\n                   data: data, \n                },\n               ],  \n            }} \n            />\n        )}\n        </div>\n    );\n}\n\nexport default LineGraph \n","import React, {useEffect, useState } from \"react\";\nimport { MenuItem, FormControl, Select, Card, CardContent} from \"@material-ui/core\";\nimport './App.css';\nimport Infobox from \"./Infobox\";\nimport Map from \"./Map\";\nimport Table from \"./Table\";\nimport { sortData, prettyPrintStat } from \"./util\";\nimport LineGraph from \"./LineGraph\";\nimport \"leaflet/dist/leaflet.css\";\nimport numeral from \"numeral\";\n\nfunction App() {\n  const [countries, setCountries] = useState([]); \n  const [country, setCountry] = useState('worldwide');\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3); \n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  // https://disease.sh/v3/covid-19/countries\n  useEffect(() => {    \n    const getCountriesData = async () => {\n      fetch (\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,  // United States, United Kingdom\n            value: country.countryInfo.iso2, // UK, USA, FR \n          }));\n          let sortedData = sortData(data);\n          setTableData(sortedData);\n          setMapCountries(data);\n          setCountries(countries);\n      });\n    };\n\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value; \n    const url = \n      countryCode === \"worldwide\" \n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    await fetch(url) \n      .then((response) => response.json())\n      .then((data) => {\n        setCountry(countryCode); \n        setCountryInfo(data);\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(4);\n      });\n  };\n\n  return (\n    <div className=\"app\">    \n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID-19 TRACKER</h1>\n          <FormControl className=\"app_dropdown\">\n            <Select \n            variant=\"outlined\" \n            value = {country}\n            onChange={onCountryChange} \n           >\n              {/* Loop through all the countries and show a drop \n              down list of the countries*/}\n            <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n            {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n        </FormControl>\n      </div>\n      <div className=\"app__stats\">\n        <Infobox title=\"Coronavirus Cases\" \n        onClick={(event) => setCasesType(\"cases\")}\n        title=\"Coronavirus Cases\"\n        isRed\n        active={casesType === \"cases\"}\n        cases={prettyPrintStat(countryInfo.todayCases)}\n        total={numeral(countryInfo.cases).format(\"0.0a\")}\n      />\n\n        <Infobox title=\"Recovered\" \n        onClick={(event) => setCasesType(\"recovered\")}\n        title=\"Recovered\"\n        active={casesType === \"recovered\"}\n        cases={prettyPrintStat(countryInfo.todayRecovered)}\n        total={numeral(countryInfo.recovered).format(\"0.0a\")}\n      />\n        <Infobox title=\"Deaths\" \n        onClick={(event) => setCasesType(\"deaths\")}\n        title=\"Deaths\"\n        isRed\n        active={casesType === \"deaths\"}\n        cases={prettyPrintStat(countryInfo.todayDeaths)}\n        total={numeral(countryInfo.deaths).format(\"0.0a\")}\n        />\n      </div>\n      <Map \n       countries={mapCountries} \n       casesType={casesType}\n       center={mapCenter}\n       zoom={mapZoom}\n      />\n      </div>\n      <Card className=\"app__right\">\n      <CardContent>\n        <div className=\"app_information\">\n          <h3>Live Cases by Country</h3>\n          <Table countries={tableData} />\n          <h3>Worldwide new {casesType}</h3>\n          <LineGraph casesType={casesType} />\n        </div>\n      </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}